@page "/forecast"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IConfiguration Configuration
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web
@using System.Linq
@using MudBlazor
@using WeatherApp.Models
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<PageTitle>Weather Application</PageTitle>

<div class="main-container mt-15">
    <div class="weather-input">
        <h2 class="head-title">Get Weather Information</h2>
        @* <input type="text" *@
        @* class="input-box" *@
        @* placeholder="Enter City name" *@
        @* @bind="city" *@
        @* @bind:event="oninput" *@
        @* @onkeydown="HandleKeyPress" /> *@

        <MudTextField @bind-Value="city" Variant="Variant.Outlined"
                      Class="input-box" @oninput="(e) => city = e.Value.ToString()"
                      @onkeydown="HandleKeyPress"
                      Placeholder="Enter City name" />



        <div class="button-container">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" OnClick="GetWeather">
                Get Weather
            </MudButton>


            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mt-2" @onclick="fav">
                Add 2 Fav
            </MudButton>

        </div>

    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }

    @if (weatherForecast != null)
    {
        <div class="forecast">
            <h3>Weather Forecast for the Next 5 Days in @city</h3>
            <div class="forecast-grid">

                @foreach (var day in weatherForecast.List.Where((_, i) => i % 8 == 0))
                {
                    <div class="forecast-item">
                        <p><strong>@DateTimeOffset.FromUnixTimeSeconds(day.Dt).DateTime.ToString("MMM dd, yyyy")</strong></p>
                        <p>@day.Weather[0].Description</p>
                        <p>@day.Main.Temp &deg;C</p>
                        <p>Humidity: @day.Main.Humidity%</p>
                        <p>Wind Speed: @day.Wind?.Speed km/h</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>

    /* Main Container Styles */
    .main-container {
        width: 100%;
        max-width: 850px;
        padding: 30px;
        background: linear-gradient(135deg, #1e3c72, #2a5298);
        /* background: #7ec9e6; */
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        text-align: center;
        margin: 20px auto;
        font-family: 'Arial', sans-serif;
        color: #fff;
    }

    /* Heading Styles */
    .head-title {
        font-size: 2rem;
        font-weight: bold;
        color: #fff;
        margin-bottom: 20px;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
    }

    /* Input Field Styles */
    .input-box {
        background-color: rgb(229 227 233 / 99%);
        /* border-radius: 30px; */
        border: none;
    }

    /* Button Styles */
    .MudButton {
        background-color: #00aaff;
        color: #fff;
        padding: 12px 24px;
        font-size: 1.2rem;
        font-weight: bold;
        border-radius: 30px;
        cursor: pointer;
        transition: transform 0.3s ease-in-out, background-color 0.3s ease;
        border: none;
    }

        .MudButton:hover {
            transform: translateY(-3px);
            background-color: #0099cc;
        }

        .MudButton:active {
            transform: translateY(1px);
        }

    /* Error Message Styles */
    .error-message {
        color: #ff3f3f;
        font-size: 1.1rem;
        font-weight: 600;
        margin-top: 20px;
    }

    /* Weather Card Styles */
    .weather-card {
        padding: 25px;
        margin-top: 30px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
        color: #fff;
        text-align: left;
    }

        .weather-card h2 {
            font-size: 2rem;
            margin-bottom: 20px;
        }

        .weather-card p {
            font-size: 1.1rem;
            margin: 5px 0;
            line-height: 1.5;
        }

        .weather-card strong {
            color: #00aaff;
        }

    /* Forecast Styles */
    .forecast {
        margin-top: 40px;
    }

    .forecast-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
    }

    .forecast-item {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 15px;
        text-align: center;
        transition: transform 0.3s ease, background-color 0.3s ease;
    }

        .forecast-item:hover {
            transform: translateY(-5px);
            background-color: rgba(255, 255, 255, 0.2);
        }

        .forecast-item p {
            font-size: 1rem;
            margin: 5px 0;
            line-height: 1.5;
        }

        .forecast-item strong {
            font-weight: 600;
            color: #00aaff;
        }

    
    .loading-message {
        font-size: 1.2rem;
        color: #ddd;
        margin-top: 20px;
    }

    .small-button {
        padding: 3px 6px; 
        font-size: 0.8rem; 
        height: auto;
        min-width: auto; 
    }

    .MudIconButton {
        font-size: 1rem; 
    }
</style>

@code {
    private string city = string.Empty;
    private string name = string.Empty;
    private string errorMessage = string.Empty;
    private WeatherForecastResponse? weatherForecast;
    private string apiKey = "1a747994fdcf2749fa00c1dd7454e2b6";

    private string ApiUrlForecast => $"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={apiKey}";

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Task.Delay(50);  
            await GetWeather();
        }
    }


    private async Task GetWeather()
    {
        Console.WriteLine($"City entered: '{city}'"); 

        if (string.IsNullOrWhiteSpace(city))
        {
            errorMessage = "Please enter a valid city name.";
            weatherForecast = null; 
            return;
        }

        try
        {
            weatherForecast = await Http.GetFromJsonAsync<WeatherForecastResponse>(ApiUrlForecast);

            if (weatherForecast != null && weatherForecast.List.Any()) 
            {
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "City not found or no data available.";
                weatherForecast = null; 
            }
        }
        catch (Exception)
        {
            errorMessage = "Error fetching weather data. Please try again.";
            weatherForecast = null; 
        }
    }



    public async Task fav()
    {
        if (string.IsNullOrWhiteSpace(city))
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add("Please enter a valid city name.", Severity.Warning);
            return;
        }

        var userjson = await LocalStorage.GetItemAsync<string>("userEmail");
        var cityToAdd = new FavoriteCity
            {
                Email = userjson,
                CityName = city
            };

        try
        {
            weatherForecast = await Http.GetFromJsonAsync<WeatherForecastResponse>(ApiUrlForecast);

            if (weatherForecast == null || !weatherForecast.List.Any()) 
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
                Snackbar.Add("Invalid city! Please enter a correct city name.", Severity.Error);
                weatherForecast = null; 
                return;
            }

            var response = await Http.PostAsJsonAsync("https://weatherserver-mmej.onrender.com/api/Favorites", cityToAdd);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
                Snackbar.Add("City added to favorites!", Severity.Success);
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
                // Snackbar.Add($"Failed to add city: {responseText}", Severity.Error);
                Snackbar.Add($"Failed to add city you want to login or Already in DB ", Severity.Error);
            }
        }
        catch (Exception)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add("Error! Please enter a valid city name.", Severity.Error);
            weatherForecast = null; // Reset weather data
        }
    }


    public class WeatherForecastResponse
    {
        public List<WeatherForecast> List { get; set; } = new();
    }

    public class WeatherForecast
    {
        public MainInfo Main { get; set; } = new();
        public WeatherInfo[] Weather { get; set; } = Array.Empty<WeatherInfo>();
        public long Dt { get; set; }
        public WindInfo Wind { get; set; } = new();
    }

    public class MainInfo
    {
        public double Temp { get; set; }
        public double Humidity { get; set; }
        public double Pressure { get; set; }
    }

    public class WindInfo
    {
        public double Speed { get; set; }
    }

    public class WeatherInfo
    {
        public string Main { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
    void ChangePosition(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Normal);
    }
}