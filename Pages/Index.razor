@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using MudBlazor
@using System.Net.Http.Json
@using Microsoft.JSInterop

<PageTitle>Welcome to Weather App</PageTitle>

<div class="welcome-container mt-20">
    <div class="intro-section">
        <h1 class="title">Welcome to SkySense Weather App</h1>
        <p class="subtitle">Get real-time weather updates based on your location!</p>

        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GetUserLocation">Get Weather</MudButton>
    </div>

    <div class="weather-container">
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" Class="mt-5" />
            <p>Fetching Weather...</p>
        }
        else if (weather is not null)
        {
            <div class="forecast-grid">
                <MudCard Class="forecast-item">
                    <MudCardContent>
                        <h2>Current Weather in @weather.Name</h2>
                        <p><strong>Temperature:</strong> @weather.Main?.Temp °C</p>
                        <p><strong>Humidity:</strong> @weather.Main?.Humidity %</p>
                        <p><strong>Condition:</strong> @weather.Weather?[0]?.Description</p>
                        <p><strong>Wind Speed:</strong> @weather.Wind?.Speed m/s</p>
                    </MudCardContent>
                </MudCard>
            </div>
        }
    </div>
    </div>
    <style>
        .forecast-grid {
            /* display: flex; */
            /* justify-content: center; */
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        .forecast-item {
        background-color: rgba(100, 100, 200, 1);
        background: linear-gradient(135deg, #8694ad, #2a5298);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            transition: transform 0.3s ease, background-color 0.3s ease;
            max-width: 300px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        }

            .forecast-item:hover {
                transform: translateY(-5px);
            }

            .forecast-item p {
                font-size: 1rem;
                margin: 5px 0;
                line-height: 1.5;
                color: white;
            }

            .forecast-item strong {
                font-weight: 600;
                color: #00aaff;
            }

    .welcome-container {
        display: flex;
        flex-direction: column;
        align-items: center; /* Centers horizontally */
        justify-content: flex-start; /* Aligns to the top */
        height: 100vh; /* Full viewport height */
        text-align: center;
        padding-top: 50px; /* Adjust this value as needed */

    }

    .intro-section {
        background: linear-gradient(135deg, #1e3c72, #2a5298);
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease, background-color 0.3s ease;
    }

    .title {
        font-size: 2rem;
        color: #fff;
    }

    .subtitle {
        font-size: 1.2rem;
        color: #ccc;
    }

    </style>


@code {
    public class WeatherResponse
    {
        public string? Name { get; set; }
        public MainInfo? Main { get; set; }
        public List<WeatherInfo>? Weather { get; set; } = new();
        public WindInfo? Wind { get; set; }
    }

    public class MainInfo { public double Temp { get; set; } public double Humidity { get; set; } }
    public class WeatherInfo { public string? Description { get; set; } }
    public class WindInfo { public double Speed { get; set; } }

    public class Geolocation
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    private WeatherResponse? weather;
    private double latitude;
    private double longitude;
    private bool isLoading = false;

    private async Task GetUserLocation()
    {
        isLoading = true;
        weather = null;

        try
        {
            var location = await JS.InvokeAsync<Geolocation>("getUserLocation");
            latitude = location.Latitude;
            longitude = location.Longitude;
            await GetWeather();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting location: {ex.Message}");
            isLoading = false;
        }
    }

    private async Task GetWeather()
    {
        try
        {
            string apiKey = "ae0256f4cc84c78906bacc7019637c24";
            string apiUrl = $"https://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={apiKey}&units=metric";
            weather = await Http.GetFromJsonAsync<WeatherResponse>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
